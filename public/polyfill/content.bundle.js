/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/content.js":
/*!***************************!*\
  !*** ./public/content.js ***!
  \***************************/
/***/ (() => {

eval("const LABEL = {\n  featuredSSRs: 'SSR détecteur',\n  nonFeaturedSSRs: 'SSR hors détecteur'\n};\n\n/**\n * Utility function to get the rarity of a card.\n * @param {number} rarity - The rarity value of the card.\n * @returns {string} - The rarity of the card.\n */\nconst getCardRarity = rarity => {\n  switch (rarity) {\n    case 0:\n      return 'n';\n    case 1:\n      return 'r';\n    case 2:\n      return 'sr';\n    case 3:\n      return 'ssr';\n    case 4:\n      return 'ur';\n    case 5:\n      return 'lr';\n    default:\n      return '';\n  }\n};\n\n/**\n * Utility function to get the source of the rarity image for a card.\n * @param {number} rarity - The rarity value of the card.\n * @returns {string} - The source of the rarity image.\n */\nconst getCardRaritySrc = rarity => \"../../../../img/layout/cha_rare_\".concat(rarity, \".png\");\n\n/**\n * Utility function to get the element of a card.\n * @param {number} element - The element value of the card.\n * @returns {string} - The element of the card.\n */\nconst getCardElement = element => {\n  switch (element) {\n    case 0:\n      // agl\n      return '00';\n    case 1:\n      // teq\n      return '01';\n    case 2:\n      // int\n      return '02';\n    case 3:\n      // str\n      return '03';\n    case 4:\n      // phy\n      return '04';\n    default:\n      return '';\n  }\n};\n\n/**\n * Utility function to get the source of the element icon for a card.\n * @param {number} element - The element value of the card.\n * @returns {string} - The source of the element icon.\n */\nconst getCardElementSrc = element => \"../../../../img/layout/cha_type_icon_\".concat(element, \".png\");\n\n/**\n * Utility function to get the background image for a card.\n * @param {number} element - The element value of the card.\n * @param {number} rarity - The rarity value of the card.\n * @returns {string} - The background image for the card.\n */\nconst getCardBackground = (element, rarity) => \"../../../../img/layout/character_thumb_bg/cha_base_\".concat(getCardElement(element), \"_\").concat(getCardElement(rarity), \".png\");\n\n/**\n * Creates a section element with the specified id and title.\n *\n * @param {string} id - The id of the section element.\n * @param {string} title - The title of the section element.\n * @returns {HTMLElement} The created section element.\n */\nconst createSection = (id, title) => {\n  const section = document.createElement('div');\n  section.id = id;\n  section.classList.add('section');\n  section.innerHTML = \"\\n      <img class=\\\"section__dragon-ball\\\" src=\\\"../../../img/ui/dragon-ball-loader.png\\\" alt=\\\"dragon-ball-loader\\\">\\n      <span class=\\\"section__title\\\">\".concat(title, \"</span>\\n      <img class=\\\"section__dragon-ball\\\" src=\\\"../../../img/ui/dragon-ball-loader.png\\\" alt=\\\"dragon-ball-loader\\\">\\n  \");\n  return section;\n};\n\n/**\n * Creates a card element based on the provided card data.\n * @param {Object} card - The card data.\n * @returns {HTMLElement} - The created card element.\n */\nconst createCardElement = card => {\n  const cardItem = document.createElement('div');\n  cardItem.classList.add('card');\n  const element = getCardElement(card.element);\n  const rarity = getCardRarity(card.rarity);\n  cardItem.innerHTML = \"\\n      <div class=\\\"card__container\\\" style=\\\"background-image: url(\".concat(getCardBackground(card.element, card.rarity), \")\\\">\\n        <img src=\\\"\").concat(card.thumb, \"\\\" alt=\\\"\").concat(card.name, \"\\\" title=\\\"\").concat(card.name, \"\\\" class=\\\"card__thumb\\\" />\\n        <img src=\\\"\").concat(getCardRaritySrc(rarity), \"\\\" alt=\\\"\").concat(card.rarity, \"\\\" class=\\\"card__rarity\\\" />\\n        <img src=\\\"\").concat(getCardElementSrc(element), \"\\\" alt=\\\"\").concat(card.element, \"\\\" class=\\\"card__element\\\" />\\n        \").concat(card.count ? \"<span class=\\\"card__count\\\">\".concat(card.count, \"</span>\") : '', \"\\n      </div>\\n    \");\n  return cardItem;\n};\n\n/**\n * Initializes an element with the specified id if it doesn't already exist.\n * @param {string} id - The id of the element to initialize.\n */\nconst initId = (id, target) => new Promise((resolve, reject) => {\n  if (!document.getElementById(id)) {\n    const summonList = document.createElement('div');\n    summonList.id = id;\n    summonList.classList.add('summon-list');\n    target.appendChild(summonList);\n    resolve();\n  } else {\n    reject(new Error(\"Element with id \".concat(id, \" already exists.\")));\n  }\n});\nconst initSummonId = (id, target) => new Promise((resolve, reject) => {\n  if (!document.getElementById(id)) {\n    const summonList = document.createElement('div');\n    summonList.id = id;\n    summonList.innerHTML = \"\\n      <div id=\\\"section-\".concat(id, \"\\\"></div>\\n      <div id=\\\"summon-\").concat(id, \"\\\"></div>\\n    \");\n    target.appendChild(summonList);\n    resolve();\n  } else {\n    reject(new Error(\"Element with id \".concat(id, \" already exists.\")));\n  }\n});\n\n/**\n * Initializes a section with the given id and title.\n * If a section with the given id does not exist,\n * it creates a new section and appends it to the 'summon-list' element.\n *\n * @param {string} id - The id of the section.\n * @param {string} title - The title of the section.\n */\nconst initSectionId = (id, target, title) => new Promise((resolve, reject) => {\n  if (!document.getElementById(id)) {\n    const section = createSection(id, title);\n    target.appendChild(section);\n    resolve();\n  } else {\n    reject(new Error(\"Section with id \".concat(id, \" already exists.\")));\n  }\n});\n\n/**\n * Removes an element from the DOM based on its ID.\n * @param {string} id - The ID of the element to be removed.\n */\nconst removeId = id => {\n  const element = document.getElementById(id);\n  if (element) {\n    element.remove();\n  }\n};\n\n/**\n * Finds the animated image element for a given gasha ID.\n * @param {string} gashaId - The ID of the gasha.\n * @returns {Element|null} - The animated image element if found, or null if not found.\n */\nconst findAnimatedImgGasha = gashaId => {\n  try {\n    const gashaElement = document.getElementById(\"gasha_\".concat(gashaId)).parentNode.parentNode.children[2].children[3];\n    return gashaElement;\n  } catch (error) {\n    return null;\n  }\n};\n\n/**\n * Finds the static image element for a given gasha ID.\n * @param {string} gashaId - The ID of the gasha.\n * @returns {HTMLImageElement|null} - The image element if found, or null if not found.\n */\nconst findStaticImgGasha = gashaId => {\n  try {\n    const imgElement = document.querySelector(\"img[src=\\\"../../../img/gashas/gashas_\".concat(gashaId, \".png\\\"]\"));\n    return imgElement.parentNode.parentNode.parentNode.children[2].children[3];\n  } catch (error) {\n    return null;\n  }\n};\n\n/**\n * Initializes the display of the summon list.\n * @returns {Promise<void>} A promise that resolves when all IDs have been successfully initialized.\n */\nconst initDisplaySummonList = async gashaId => {\n  const staticTarget = findStaticImgGasha(gashaId);\n  const animatedTarget = findAnimatedImgGasha(gashaId);\n  const target = staticTarget || animatedTarget;\n  try {\n    await Promise.all([initSectionId('section-summon', target, 'Summon Simulator'), initId('summon-stats', target), initId('summon-buttons', target), initId('summon-result', target),\n    // summons results\n\n    initSummonId('featuredSSRs', target), initSummonId('nonFeaturedSSRs', target), initId('cards-list', document.body) // init cards list to load all thumbs\n    ]);\n  } catch (error) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Creates a summon button element.\n *\n * @param {string} gashaId - The ID of the gasha.\n * @param {string} buttonText - The text to display on the button.\n * @param {string} action - The action associated with the button.\n * @returns {HTMLButtonElement} The created button element.\n */\nconst createSummonButton = (gashaId, buttonText, action) => {\n  const button = document.createElement('button');\n  button.id = \"button-\".concat(action, \"-\").concat(gashaId);\n  button.innerHTML = buttonText;\n  const url = chrome.runtime.getURL(\"assets/\".concat(action, \"_summon.webp\"));\n  button.style.backgroundImage = \"url(\".concat(url, \")\");\n  button.classList.add('summon-button', \"summon-button__\".concat(action));\n  button.onclick = () => {\n    chrome.runtime.sendMessage({\n      action: \"USER_\".concat(action.toUpperCase(), \"_SUMMON\"),\n      gashaId\n    });\n  };\n  return button;\n};\n\n/**\n * Displays the summon buttons for a given gashaId.\n *\n * @param {string} gashaId - The ID of the gasha.\n * @returns {void}\n */\nconst displaySummonButtons = gashaId => {\n  if (document.getElementById(\"button-single-\".concat(gashaId)) || document.getElementById(\"button-multi-\".concat(gashaId))) {\n    return;\n  }\n  const summonButtons = document.getElementById('summon-buttons');\n  const buttonSingle = createSummonButton(gashaId, 'Single Summon', 'single');\n  summonButtons.appendChild(buttonSingle);\n  const buttonMulti = createSummonButton(gashaId, 'Multi Summon', 'multi');\n  summonButtons.appendChild(buttonMulti);\n};\n\n/**\n * Displays a list of cards on the webpage.\n * @param {Object[]} cards - The list of cards to display.\n */\nconst displayCardsList = function (id, cards) {\n  let init = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const cardsList = document.getElementById(id);\n  if (cardsList && init) {\n    cardsList.innerHTML = '';\n  }\n  cardsList.classList.add('cards-list');\n  cards.forEach(card => {\n    const cardItem = createCardElement(card);\n    // add class to featured card\n    if (card !== null && card !== void 0 && card.featured && card.rarity === 3) {\n      cardItem.classList.add('card--featured');\n    }\n    cardsList.appendChild(cardItem);\n  });\n};\nconst displaySummonedCardsList = function (cards, summonsCards, category) {\n  var _document$getElementB;\n  let init = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const cardsList = document.getElementById(\"summon-\".concat(category));\n  if (cardsList && init) {\n    cardsList.innerHTML = '';\n  }\n  if (!((_document$getElementB = document.getElementById(\"section-\".concat(category))) !== null && _document$getElementB !== void 0 && _document$getElementB.firstChild)) {\n    const section = createSection(\"section-\".concat(category), LABEL[category]);\n    const sectionContainer = document.getElementById(\"section-\".concat(category));\n    if (sectionContainer) {\n      sectionContainer.appendChild(section);\n    }\n  }\n  if (cardsList) {\n    cardsList.classList.add('cards-list');\n    cards.forEach(card => {\n      if (!summonsCards[card.id]) {\n        return;\n      }\n      const cardItem = createCardElement(summonsCards[card.id]);\n      cardsList.appendChild(cardItem);\n    });\n  }\n};\n\n/**\n * Displays the summoned cards.\n *\n * @param {Object} cards - The object containing the summoned cards.\n * @param {Array} summonCards - The array of cards to be displayed.\n */\nconst displaySummonedCards = (cards, summonCards) => {\n  const {\n    featuredSSRs,\n    nonFeaturedSSRs\n  } = cards;\n  displaySummonedCardsList(featuredSSRs, summonCards, 'featuredSSRs', true);\n  displaySummonedCardsList(nonFeaturedSSRs, summonCards, 'nonFeaturedSSRs', true);\n};\n\n/**\n * Displays the summon statistics on the page.\n *\n * @param {number} totalMulti - The total number of multi summons.\n * @param {number} totalSingle - The total number of single summons.\n * @param {number} totalDs - The total number of dragon stones used.\n */\nconst displaySummonStats = (totalMulti, totalSingle, totalDs) => {\n  const dsImg = chrome.runtime.getURL('assets/ds.webp');\n  const summonStats = document.getElementById('summon-stats');\n  summonStats.innerHTML = \"\\n    <div class=\\\"summon-stats__wrapper\\\">\\n      <div class=\\\"summon-stats\\\">\\n        <div class=\\\"summon-stats__row\\\">\\n          <span class=\\\"summon-stats__title\\\">Single: </span>\\n          <span class=\\\"summon-stats__value\\\">\".concat(totalSingle, \"</span>\\n        </div>\\n        <div class=\\\"summon-stats__row\\\">\\n          <span class=\\\"summon-stats__title\\\">Multi: </span>\\n          <span class=\\\"summon-stats__value\\\">\").concat(totalMulti, \"</span>\\n        </div>\\n      </div>\\n      <div class=\\\"summon-stats\\\">\\n        <div class=\\\"summon-stats__row\\\" id=\\\"summon-button-reset\\\">\\n        </div>\\n        <div class=\\\"summon-stats__row\\\">\\n          <img src=\\\"\").concat(dsImg, \"\\\" class=\\\"summon-stats__img\\\" />\\n          <span class=\\\"summon-stats__ds\\\">\").concat(totalDs, \"</span>\\n        </div>\\n      </div>\\n    </div>\\n  \");\n};\n\n/**\n * Displays a reset button for a summon.\n * @param {string} gashaId - The ID of the summon.\n */\nconst displaySummonResetButton = gashaId => {\n  const summonButtonReset = document.getElementById('summon-button-reset');\n  const buttonReset = document.createElement('button');\n  buttonReset.innerHTML = 'Reset';\n  buttonReset.id = 'button-reset';\n  buttonReset.classList.add('summon-button', 'summon-button__reset');\n  buttonReset.onclick = () => {\n    chrome.runtime.sendMessage({\n      action: 'USER_RESET_SUMMONS',\n      gashaId\n    });\n  };\n  summonButtonReset.appendChild(buttonReset);\n};\n\n/**\n * Event listener for messages from the background script.\n * @param {Object} message - The message received from the background script.\n */\nchrome.runtime.onMessage.addListener(async message => {\n  switch (message.action) {\n    case 'BACKGROUND_SINGLE_SUMMON':\n      await initDisplaySummonList(message.gashaId);\n      displayCardsList('summon-result', message.result, true);\n      break;\n    case 'BACKGROUND_MULTI_SUMMON':\n      await initDisplaySummonList(message.gashaId);\n      displayCardsList('summon-result', message.result, true);\n      break;\n    case 'BACKGROUND_UPDATE_STORAGE':\n      {\n        const {\n          fetchedUrls\n        } = message.storage;\n        const {\n          totalMultiSummons,\n          totalSingleSummons,\n          totalDS,\n          summonCards\n        } = message.storage[message.gashaId];\n        displaySummonStats(totalMultiSummons, totalSingleSummons, totalDS, message.gashaId);\n        if (totalDS !== 0) {\n          displaySummonResetButton(message.gashaId);\n          displaySummonedCards(fetchedUrls[message.gashaId], summonCards);\n        }\n        break;\n      }\n    case 'REQUEST_INTERCEPTED_GASHA':\n      {\n        const {\n          gashaId\n        } = message;\n        await initDisplaySummonList(gashaId);\n        displaySummonButtons(gashaId);\n        displaySummonStats(0, 0, 0);\n        break;\n      }\n    case 'BACKGROUND_RESET_SUMMONS':\n      {\n        displayCardsList('summon-result', [], true);\n        removeId('summon-result');\n        removeId('featuredSSRs');\n        removeId('nonFeaturedSSRs');\n        break;\n      }\n    default:\n      break;\n  }\n});\n\n//# sourceURL=webpack://dokkan-battle-summon-extension/./public/content.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/content.js"]();
/******/ 	
/******/ })()
;